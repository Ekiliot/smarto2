'use client'

import { useEffect, useState, useCallback } from 'react'

interface ServiceWorkerState {
  isSupported: boolean
  isInstalled: boolean
  isActive: boolean
  isOnline: boolean
  registration: ServiceWorkerRegistration | null
  version: string | null
  cacheInfo: CacheInfo | null
}

interface CacheInfo {
  STATIC: { size: number; maxSize: number; ttl: number }
  DYNAMIC: { size: number; maxSize: number; ttl: number }
  IMAGES: { size: number; maxSize: number; ttl: number }
  API: { size: number; maxSize: number; ttl: number }
}

interface UpdateInfo {
  hasUpdate: boolean
  isUpdating: boolean
}

export function useServiceWorker() {
  const [state, setState] = useState<ServiceWorkerState>({
    isSupported: false,
    isInstalled: false,
    isActive: false,
    isOnline: navigator?.onLine ?? true,
    registration: null,
    version: null,
    cacheInfo: null
  })

  const [updateInfo, setUpdateInfo] = useState<UpdateInfo>({
    hasUpdate: false,
    isUpdating: false
  })

  const [notifications, setNotifications] = useState<string[]>([])

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker
  useEffect(() => {
    if (!('serviceWorker' in navigator)) {
      console.log('üö´ Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
      return
    }

    setState(prev => ({ ...prev, isSupported: true }))

    const registerSW = async () => {
      try {
        const registration = await navigator.serviceWorker.register('/sw.js', {
          scope: '/',
          updateViaCache: 'none' // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        })

        console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration)

        setState(prev => ({
          ...prev,
          registration,
          isInstalled: true,
          isActive: !!registration.active
        }))

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        registration.addEventListener('updatefound', () => {
          console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker –Ω–∞–π–¥–µ–Ω–æ')
          setUpdateInfo(prev => ({ ...prev, hasUpdate: true }))
          
          const newWorker = registration.installing
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                setUpdateInfo(prev => ({ ...prev, hasUpdate: true }))
                addNotification('–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
              }
            })
          }
        })

        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        navigator.serviceWorker.addEventListener('controllerchange', () => {
          console.log('üîÑ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
          setState(prev => ({ ...prev, isActive: true }))
          setUpdateInfo({ hasUpdate: false, isUpdating: false })
          addNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
          
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          if (updateInfo.isUpdating) {
            window.location.reload()
          }
        })

        // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Service Worker
        navigator.serviceWorker.addEventListener('message', handleSWMessage)

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–µ
        getCacheInfo()

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error)
      }
    }

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
    const handleOnline = () => {
      setState(prev => ({ ...prev, isOnline: true }))
      addNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }
    
    const handleOffline = () => {
      setState(prev => ({ ...prev, isOnline: false }))
      addNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º')
    }

    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)

    registerSW()

    return () => {
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
      navigator.serviceWorker?.removeEventListener('message', handleSWMessage)
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Service Worker
  const handleSWMessage = useCallback((event: MessageEvent) => {
    const { type, data } = event.data
    
    switch (type) {
      case 'CACHE_INFO_RESPONSE':
        setState(prev => ({ ...prev, cacheInfo: data }))
        break
      
      case 'SW_VERSION':
        setState(prev => ({ ...prev, version: data.version }))
        break
      
      case 'CACHE_UPDATED':
        addNotification(`–ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: ${data.url}`)
        break
      
      case 'PREFETCH_COMPLETE':
        addNotification(`–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${data.count} —Ñ–∞–π–ª–æ–≤`)
        break
    }
  }, [])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const addNotification = useCallback((message: string) => {
    setNotifications(prev => [...prev, message])
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      setNotifications(prev => prev.filter(n => n !== message))
    }, 5000)
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker
  const updateServiceWorker = useCallback(async () => {
    if (!state.registration) return

      try {
      setUpdateInfo(prev => ({ ...prev, isUpdating: true }))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await state.registration.update()
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å waiting worker, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
      if (state.registration.waiting) {
        state.registration.waiting.postMessage({ type: 'SKIP_WAITING' })
      }
      
      console.log('üîÑ Service Worker –æ–±–Ω–æ–≤–ª–µ–Ω')
      } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker:', error)
      setUpdateInfo(prev => ({ ...prev, isUpdating: false }))
    }
  }, [state.registration])

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Service Worker
  const sendMessageToSW = useCallback((message: any) => {
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage(message)
    }
  }, [])

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const cachePage = useCallback(async (url: string) => {
    sendMessageToSW({
          type: 'CACHE_PAGE',
      data: { url }
        })
    console.log(`üì± –ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: ${url}`)
  }, [sendMessageToSW])

  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  const prefetchResources = useCallback(async (urls: string[]) => {
    sendMessageToSW({
      type: 'PREFETCH_RESOURCES',
      data: { urls }
    })
    console.log(`üöÄ –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ ${urls.length} —Ä–µ—Å—É—Ä—Å–æ–≤`)
  }, [sendMessageToSW])

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  const clearCache = useCallback(async () => {
    try {
      sendMessageToSW({ type: 'CLEAR_CACHE' })
      
      // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–µ—à–∏
      if ('caches' in window) {
        const cacheNames = await caches.keys()
        await Promise.all(cacheNames.map(name => caches.delete(name)))
      }
      
      setState(prev => ({ ...prev, cacheInfo: null }))
      addNotification('–ö–µ—à –æ—á–∏—â–µ–Ω')
      console.log('üßπ –ö–µ—à –æ—á–∏—â–µ–Ω')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error)
    }
  }, [sendMessageToSW, addNotification])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ
  const getCacheInfo = useCallback(async () => {
    if (!navigator.serviceWorker.controller) return

    try {
      const messageChannel = new MessageChannel()
      
      messageChannel.port1.onmessage = (event) => {
        if (event.data.type === 'CACHE_INFO_RESPONSE') {
          setState(prev => ({ ...prev, cacheInfo: event.data.data }))
        }
      }

      navigator.serviceWorker.controller.postMessage(
        { type: 'GET_CACHE_INFO' },
        [messageChannel.port2]
      )
      } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ:', error)
    }
  }, [])

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const scheduleBackgroundSync = useCallback(async (tag: string) => {
    if (!state.registration) return

    try {
      if ('sync' in state.registration && state.registration.sync) {
        await (state.registration.sync as any).register(tag)
        console.log(`üîÑ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: ${tag}`)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error)
    }
  }, [state.registration])

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const requestNotificationPermission = useCallback(async () => {
    if (!('Notification' in window)) {
      console.log('üö´ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è')
      return false
    }

    const permission = await Notification.requestPermission()
    return permission === 'granted'
  }, [])

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const subscribeToPush = useCallback(async (vapidPublicKey: string) => {
    if (!state.registration) return null

    try {
      const subscription = await state.registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: vapidPublicKey
      })
      
      console.log('üìß –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞')
      return subscription
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      return null
      }
  }, [state.registration])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
  const getCacheStats = useCallback(() => {
    if (!state.cacheInfo) return null

    const totalSize = Object.values(state.cacheInfo).reduce((sum, cache) => sum + cache.size, 0)
    const totalMaxSize = Object.values(state.cacheInfo).reduce((sum, cache) => sum + cache.maxSize, 0)
    const utilization = totalMaxSize > 0 ? (totalSize / totalMaxSize) * 100 : 0

    return {
      totalSize,
      totalMaxSize,
      utilization: Math.round(utilization),
      caches: state.cacheInfo
    }
  }, [state.cacheInfo])

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const dismissNotification = useCallback((message: string) => {
    setNotifications(prev => prev.filter(n => n !== message))
  }, [])

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    ...state,
    updateInfo,
    notifications,
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    updateServiceWorker,
    sendMessageToSW,
    cachePage,
    prefetchResources,
    clearCache,
    getCacheInfo,
    scheduleBackgroundSync,
    
    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    requestNotificationPermission,
    subscribeToPush,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getCacheStats,
    
    // UI
    dismissNotification
  }
} 
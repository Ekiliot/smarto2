// –í–µ—Ä—Å–∏—è –∏ –∏–º–µ–Ω–∞ –∫–µ—à–µ–π
const SW_VERSION = '1.1.9'
const CACHE_PREFIX = 'smarto2'
const CACHES = {
  STATIC: `${CACHE_PREFIX}-static-v${SW_VERSION}`,
  DYNAMIC: `${CACHE_PREFIX}-dynamic-v${SW_VERSION}`,
  IMAGES: `${CACHE_PREFIX}-images-v${SW_VERSION}`,
  API: `${CACHE_PREFIX}-api-v${SW_VERSION}`
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_CONFIG = {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–µ—à–µ–π (–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
  MAX_CACHE_SIZE: {
    STATIC: 50,
    DYNAMIC: 100,
    IMAGES: 200,
    API: 100
  },
  // TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  TTL: {
    STATIC: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
    DYNAMIC: 24 * 60 * 60 * 1000,    // 1 –¥–µ–Ω—å
    IMAGES: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
    API: 5 * 60 * 1000               // 5 –º–∏–Ω—É—Ç
  },
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –±–∞–π—Ç–∞—Ö)
  MAX_FILE_SIZE: 10 * 1024 * 1024 // 10 MB
}

// –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const PRECACHE_URLS = [
  '/',
  '/cart',
  '/wishlist',
  '/products',
  '/login',
  '/account',
  '/offline.html',
  // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ CSS –∏ JS —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  '/manifest.json'
]

// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
const URL_PATTERNS = {
  STATIC_PAGES: /^\/(?:$|cart|wishlist|products|login|account)/,
  PRODUCT_PAGES: /^\/product\/[^\/]+$/,
  API_REQUESTS: /^\/api\//,
  IMAGES: /\.(jpg|jpeg|png|gif|webp|svg|ico)$/i,
  FONTS: /\.(woff|woff2|ttf|eot)$/i,
  SCRIPTS: /\.(js|css)$/i
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STRATEGIES = {
  CACHE_FIRST: 'cache-first',
  NETWORK_FIRST: 'network-first',
  STALE_WHILE_REVALIDATE: 'stale-while-revalidate',
  NETWORK_ONLY: 'network-only',
  CACHE_ONLY: 'cache-only'
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log(`ÔøΩÔøΩ Service Worker v${SW_VERSION} installing...`)
  
  event.waitUntil(
    Promise.all([
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      precacheResources(),
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–µ—à–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      navigator.onLine ? cleanupOldCaches() : Promise.resolve()
    ])
  )
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SW —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π
  if (self.registration && self.registration.waiting) {
    self.skipWaiting()
  }
})

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log(`‚úÖ Service Worker v${SW_VERSION} activating...`)
  
  event.waitUntil(
    Promise.all([
      // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      navigator.onLine ? cleanupOldCaches() : Promise.resolve(),
      // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ TTL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      navigator.onLine ? cleanupExpiredCache() : Promise.resolve(),
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      self.clients.claim()
    ])
  )
})

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', (event) => {
  const { request } = event
  const url = new URL(request.url)
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') return
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º —Ä–µ—Å—É—Ä—Å–∞–º (–≤–∫–ª—é—á–∞—è Supabase –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  if (url.origin !== self.location.origin) {
    return
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
  const getCachingStrategy = (url) => {
    const urlString = url.toString()
    
    // –ù–µ –∫–µ—à–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ —Å –≤–µ—Ä—Å–∏–µ–π
    if (urlString.includes('/icon.png?v=') || urlString.includes('/manifest.json')) {
      return 'NETWORK_ONLY'
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (urlString.includes('/') && !urlString.includes('/api/') && !urlString.includes('/admin/')) {
      return 'CACHE_FIRST'
    }
    
    // API –∑–∞–ø—Ä–æ—Å—ã
    if (urlString.includes('/api/')) {
      return 'NETWORK_FIRST'
    }
    
    // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    if (urlString.includes('/admin/')) {
      return 'NETWORK_FIRST'
    }
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (urlString.match(/\.(jpg|jpeg|png|gif|webp|svg|ico)$/i)) {
      return 'CACHE_FIRST'
    }
    
    // –®—Ä–∏—Ñ—Ç—ã –∏ CSS/JS
    if (urlString.match(/\.(css|js|woff|woff2|ttf|eot)$/i)) {
      return 'CACHE_FIRST'
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 'CACHE_FIRST'
  }
  
  event.respondWith(
    handleRequest(request, getCachingStrategy(url)).catch(error => {
      console.error('‚ùå Request failed:', error)
      return handleRequestError(request, error)
    })
  )
})

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
async function precacheResources() {
  try {
    const cache = await caches.open(CACHES.STATIC)
    
    // –ö–µ—à–∏—Ä—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    const results = await Promise.allSettled(
      PRECACHE_URLS.map(async (url) => {
        try {
          const response = await fetch(url)
          if (response.ok) {
            await cache.put(url, response)
            console.log(`‚úÖ Precached: ${url}`)
          } else {
            console.warn(`‚ö†Ô∏è Failed to precache ${url}: ${response.status}`)
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Failed to precache ${url}:`, error)
          
          // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å
          if (!navigator.onLine) {
            console.log('üì± Offline mode - skipping precache for failed resources')
          }
        }
      })
    )
    
    const successful = results.filter(r => r.status === 'fulfilled').length
    console.log(`üì¶ Precached ${successful}/${PRECACHE_URLS.length} resources`)
    
  } catch (error) {
    console.error('‚ùå Precaching failed:', error)
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
function determineStrategy(url, request) {
  const pathname = url.pathname
  
  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –∫–µ—à —Å–Ω–∞—á–∞–ª–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã offline)
  if (URL_PATTERNS.STATIC_PAGES.test(pathname)) {
    return { strategy: STRATEGIES.CACHE_FIRST, cache: CACHES.STATIC }
  }
  
  // –°—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ - –∫–µ—à —Å–Ω–∞—á–∞–ª–∞ (—á—Ç–æ–±—ã –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã offline)
  if (URL_PATTERNS.PRODUCT_PAGES.test(pathname)) {
    return { strategy: STRATEGIES.CACHE_FIRST, cache: CACHES.DYNAMIC }
  }
  
  // API –∑–∞–ø—Ä–æ—Å—ã - network first —Å –∫–æ—Ä–æ—Ç–∫–∏–º TTL
  if (URL_PATTERNS.API_REQUESTS.test(pathname)) {
    return { strategy: STRATEGIES.NETWORK_FIRST, cache: CACHES.API }
  }
  
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - cache first —Å –¥–ª–∏–Ω–Ω—ã–º TTL
  if (URL_PATTERNS.IMAGES.test(pathname)) {
    return { strategy: STRATEGIES.CACHE_FIRST, cache: CACHES.IMAGES }
  }
  
  // –®—Ä–∏—Ñ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å—Å–µ—Ç—ã - cache first
  if (URL_PATTERNS.FONTS.test(pathname) || URL_PATTERNS.SCRIPTS.test(pathname)) {
    return { strategy: STRATEGIES.CACHE_FIRST, cache: CACHES.STATIC }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–µ—à —Å–Ω–∞—á–∞–ª–∞ (—á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã offline)
  return { strategy: STRATEGIES.CACHE_FIRST, cache: CACHES.DYNAMIC }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleRequest(request, strategy) {
  const cacheKey = getCacheKey(request)
  
  switch (strategy) {
    case 'CACHE_FIRST':
      return await cacheFirst(request, CACHES.DYNAMIC, cacheKey)
    
    case 'NETWORK_FIRST':
      return await networkFirst(request, CACHES.DYNAMIC, cacheKey)
    
    case 'STALE_WHILE_REVALIDATE':
      return await staleWhileRevalidate(request, CACHES.DYNAMIC, cacheKey)
    
    case 'NETWORK_ONLY':
      return await fetch(request)
    
    case 'CACHE_ONLY':
      return await caches.match(cacheKey) || new Response('Not found', { status: 404 })
    
    default:
      return await networkFirst(request, CACHES.DYNAMIC, cacheKey)
  }
}

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First
  async function cacheFirst(request, cacheName, cacheKey) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
      const cachedResponse = await caches.match(cacheKey)
      if (cachedResponse) {
        console.log(`üì¶ Serving from cache: ${request.url}`)
        return cachedResponse
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
      const response = await fetch(request)
      if (response.ok) {
        await fetchAndCache(request, response, cacheName, cacheKey)
      }
      
      return response
    } catch (error) {
      console.error('‚ùå Cache First failed:', error)
      return new Response('Service Unavailable', { status: 503 })
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First
  async function networkFirst(request, cacheName, cacheKey) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
      const response = await fetch(request)
      if (response.ok) {
        await fetchAndCache(request, response, cacheName, cacheKey)
        return response
      }
      
      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞
      const cachedResponse = await caches.match(cacheKey)
      if (cachedResponse) {
        console.log(`üì¶ Serving from cache (network failed): ${request.url}`)
        return cachedResponse
      }
      
      return response
    } catch (error) {
      console.error('‚ùå Network First failed:', error)
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
      const cachedResponse = await caches.match(cacheKey)
      if (cachedResponse) {
        console.log(`üì¶ Serving from cache (network error): ${request.url}`)
        return cachedResponse
      }
      return new Response('Service Unavailable', { status: 503 })
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è Stale While Revalidate
  async function staleWhileRevalidate(request, cacheName, cacheKey) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫–µ—à–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const cachedResponse = await caches.match(cacheKey)
      
      // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –≤ —Ñ–æ–Ω–µ
      fetch(request).then(async (response) => {
        if (response.ok) {
          await fetchAndCache(request, response, cacheName, cacheKey)
        }
      }).catch(error => {
        console.error('‚ùå Background revalidation failed:', error)
      })
      
      if (cachedResponse) {
        console.log(`üì¶ Serving stale from cache: ${request.url}`)
        return cachedResponse
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å–µ—Ç–∏
      const response = await fetch(request)
      if (response.ok) {
        await fetchAndCache(request, response, cacheName, cacheKey)
      }
      
      return response
    } catch (error) {
      console.error('‚ùå Stale While Revalidate failed:', error)
      return new Response('Service Unavailable', { status: 503 })
    }
  }

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π TTL
async function getCachedResponse(cacheKey, cacheName) {
  try {
    const cache = await caches.open(cacheName)
    const response = await cache.match(cacheKey)
    
    if (!response) return null
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    const cachedAt = response.headers.get('sw-cached-at')
    if (cachedAt) {
      const age = Date.now() - parseInt(cachedAt)
      const ttl = getCacheTTL(cacheName)
      
      // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ —É–¥–∞–ª—è–µ–º –∫–µ—à –ø–æ TTL
      if (age > ttl && navigator.onLine) {
        console.log(`‚è∞ Cache expired for: ${cacheKey}`)
        await cache.delete(cacheKey)
        return null
      }
    }
    
    console.log(`üì± Cache hit: ${cacheKey}`)
    return response
  } catch (error) {
    console.error('‚ùå Cache read error:', error)
    return null
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
async function fetchAndCache(request, response, cacheName, cacheKey) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const contentLength = response.headers.get('content-length')
    if (contentLength && parseInt(contentLength) > CACHE_CONFIG.MAX_FILE_SIZE) {
      console.log(`üì¶ File too large to cache: ${request.url}`)
      return response
    }
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const responseToCache = response.clone()
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const headers = new Headers(responseToCache.headers)
    headers.set('sw-cached-at', Date.now().toString())
    headers.set('sw-cache-version', SW_VERSION)
    
    const responseWithMeta = new Response(responseToCache.body, {
      status: responseToCache.status,
      statusText: responseToCache.statusText,
      headers
    })
    
    // –ö–µ—à–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (navigator.onLine) {
      cacheResponse(cacheName, cacheKey, responseWithMeta)
        .then(() => console.log(`üíæ Cached: ${request.url}`))
        .catch(error => console.error(`‚ùå Cache write error:`, error))
    } else {
      console.log('üì± Offline mode - skipping cache write')
    }
    
  } catch (error) {
    console.error('‚ùå Fetch and cache failed:', error)
  }
}

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞ –∫–µ—à–∞
async function cacheResponse(cacheName, cacheKey, response) {
  try {
    const cache = await caches.open(cacheName)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    await limitCacheSize(cacheName)
    
    await cache.put(cacheKey, response)
  } catch (error) {
    console.error('‚ùå Failed to cache response:', error)
  }
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–µ—à–∞
async function limitCacheSize(cacheName) {
  try {
    // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    if (!navigator.onLine) {
      console.log('üì± Offline mode - skipping cache size limit')
      return
    }
    
    const cache = await caches.open(cacheName)
    const requests = await cache.keys()
    
    const maxSize = CACHE_CONFIG.MAX_CACHE_SIZE[getCacheType(cacheName)]
    
    if (requests.length >= maxSize) {
      // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      const toDelete = requests.slice(0, requests.length - maxSize + 10) // –£–¥–∞–ª—è–µ–º —Å –∑–∞–ø–∞—Å–æ–º
      await Promise.all(toDelete.map(request => cache.delete(request)))
      console.log(`üßπ Cleaned ${toDelete.length} old cache entries from ${cacheName}`)
    }
  } catch (error) {
    console.error('‚ùå Cache size limit error:', error)
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–µ—à–∞
function getCacheType(cacheName) {
  if (cacheName.includes('static')) return 'STATIC'
  if (cacheName.includes('images')) return 'IMAGES'
  if (cacheName.includes('api')) return 'API'
  return 'DYNAMIC'
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ TTL –¥–ª—è –∫–µ—à–∞
function getCacheTTL(cacheName) {
  const type = getCacheType(cacheName)
  return CACHE_CONFIG.TTL[type] || CACHE_CONFIG.TTL.DYNAMIC
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞
function getCacheKey(request) {
  const url = new URL(request.url)
  // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ—Ä—Å–∏–∏ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  url.searchParams.delete('v')
  return url.toString()
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–µ—à–µ–π
async function cleanupOldCaches() {
  try {
    // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ –æ—á–∏—â–∞–µ–º –∫–µ—à
    if (!navigator.onLine) {
      console.log('üì± Offline mode - skipping old cache cleanup')
      return
    }
    
    const cacheNames = await caches.keys()
    const currentCaches = Object.values(CACHES)
    
    const oldCaches = cacheNames.filter(name => 
      name.startsWith(CACHE_PREFIX) && !currentCaches.includes(name)
    )
    
    if (oldCaches.length > 0) {
      await Promise.all(oldCaches.map(name => caches.delete(name)))
      console.log(`üßπ Deleted ${oldCaches.length} old caches`)
    }
  } catch (error) {
    console.error('‚ùå Cache cleanup error:', error)
  }
}

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function cleanupExpiredCache() {
  try {
    // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ –æ—á–∏—â–∞–µ–º –∫–µ—à
    if (!navigator.onLine) {
      console.log('üì± Offline mode - skipping cache cleanup')
      return
    }
    
    for (const cacheName of Object.values(CACHES)) {
      const cache = await caches.open(cacheName)
      const requests = await cache.keys()
      const ttl = getCacheTTL(cacheName)
      
      let deletedCount = 0
      
      for (const request of requests) {
        const response = await cache.match(request)
        if (response) {
          const cachedAt = response.headers.get('sw-cached-at')
          if (cachedAt) {
            const age = Date.now() - parseInt(cachedAt)
            if (age > ttl) {
              await cache.delete(request)
              deletedCount++
            }
          }
        }
      }
      
      if (deletedCount > 0) {
        console.log(`üßπ Deleted ${deletedCount} expired entries from ${cacheName}`)
      }
    }
  } catch (error) {
    console.error('‚ùå Expired cache cleanup error:', error)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleRequestError(request, error) {
  console.error(`‚ùå Request failed: ${request.url}`, error)
  
  // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
  if (request.mode === 'navigate') {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–µ—à–µ
    for (const cacheName of Object.values(CACHES)) {
      try {
        const cached = await caches.open(cacheName)
        const response = await cached.match(request)
        if (response) {
          console.log(`üì± Found cached version: ${request.url}`)
          return response
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–µ—à–∞
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const offlineResponse = await caches.match('/offline.html')
    if (offlineResponse) {
      return offlineResponse
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç offline —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return new Response(
      `<!DOCTYPE html>
      <html>
      <head>
        <title>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
          .offline { color: #666; margin: 20px 0; }
          .retry { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
        </style>
      </head>
      <body>
        <h1>üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</h1>
        <p class="offline">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
        <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–∞–Ω–µ–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞ offline.</p>
        <button class="retry" onclick="window.location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
      </body>
      </html>`,
      { 
        status: 200,
        headers: { 'Content-Type': 'text/html; charset=utf-8' }
      }
    )
  }
  
  // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
  if (URL_PATTERNS.IMAGES.test(request.url)) {
    return new Response(
      '<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg"><rect width="100%" height="100%" fill="#f3f4f6"/><text x="50%" y="50%" text-anchor="middle" fill="#9ca3af">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</text></svg>',
      { headers: { 'Content-Type': 'image/svg+xml' } }
    )
  }
  
  // –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –æ—à–∏–±–∫–æ–π
  if (URL_PATTERNS.API_REQUESTS.test(request.url)) {
    return new Response(
      JSON.stringify({ error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }),
      { 
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
  
  // –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞
  return new Response('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', { status: 503 })
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
self.addEventListener('message', (event) => {
  const { type, data } = event.data
  
  switch (type) {
    case 'CACHE_PAGE':
      handleCachePageRequest(data.url)
      break
    
    case 'CLEAR_CACHE':
      handleClearCacheRequest()
      break
    
    case 'GET_CACHE_INFO':
      handleGetCacheInfoRequest(event)
      break
    
    case 'PREFETCH_RESOURCES':
      handlePrefetchRequest(data.urls)
      break
  }
})

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
async function handleCachePageRequest(url) {
  try {
    // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ –∫–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (!navigator.onLine) {
      console.log('üì± Offline mode - skipping manual page caching')
      return
    }
    
    const cache = await caches.open(CACHES.DYNAMIC)
    await cache.add(url)
    console.log(`üì± Page cached on demand: ${url}`)
  } catch (error) {
    console.error('‚ùå Manual page caching failed:', error)
  }
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π
async function handleClearCacheRequest() {
  try {
    const cacheNames = await caches.keys()
    await Promise.all(cacheNames.map(name => caches.delete(name)))
    console.log('üßπ All caches cleared')
  } catch (error) {
    console.error('‚ùå Cache clearing failed:', error)
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–µ—à–µ
async function handleGetCacheInfoRequest(event) {
  try {
    const cacheInfo = {}
    
    for (const [name, cacheName] of Object.entries(CACHES)) {
      const cache = await caches.open(cacheName)
      const requests = await cache.keys()
      cacheInfo[name] = {
        size: requests.length,
        maxSize: CACHE_CONFIG.MAX_CACHE_SIZE[name] || 100,
        ttl: CACHE_CONFIG.TTL[name] || CACHE_CONFIG.TTL.DYNAMIC
      }
    }
    
    event.ports[0].postMessage({
      type: 'CACHE_INFO_RESPONSE',
      data: cacheInfo
    })
  } catch (error) {
    console.error('‚ùå Cache info request failed:', error)
  }
}

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
async function handlePrefetchRequest(urls) {
  try {
    // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    if (!navigator.onLine) {
      console.log('üì± Offline mode - skipping prefetch')
      return
    }
    
    const cache = await caches.open(CACHES.DYNAMIC)
    
    await Promise.allSettled(
      urls.map(async (url) => {
        try {
          const response = await fetch(url)
          if (response.ok) {
            await cache.put(url, response)
            console.log(`üöÄ Prefetched: ${url}`)
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è Prefetch failed for ${url}:`, error)
        }
      })
    )
  } catch (error) {
    console.error('‚ùå Prefetch request failed:', error)
  }
}

// –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
self.addEventListener('sync', (event) => {
  console.log('üîÑ Background sync triggered:', event.tag)
  
  // –í offline —Ä–µ–∂–∏–º–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
  if (!navigator.onLine) {
    console.log('üì± Offline mode - skipping background sync')
    return
  }
  
  switch (event.tag) {
    case 'cache-cleanup':
      event.waitUntil(cleanupExpiredCache())
      break
    
    case 'prefetch-critical':
      event.waitUntil(precacheResources())
      break
  }
})

// Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
self.addEventListener('push', (event) => {
  if (!event.data) return
  
  try {
    const data = event.data.json()
    const options = {
      body: data.body,
      icon: data.icon || '/icon-192x192.png',
      badge: data.badge || '/badge-72x72.png',
      image: data.image,
      data: data.data,
      actions: data.actions || [],
      requireInteraction: data.requireInteraction || false,
      silent: data.silent || false,
      tag: data.tag || 'default',
      renotify: data.renotify || false
    }
    
    event.waitUntil(
      self.registration.showNotification(data.title || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', options)
    )
  } catch (error) {
    console.error('‚ùå Push notification error:', error)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  event.notification.close()
  
  const { action, data } = event.notification
  let url = data?.url || '/'
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
  if (action) {
    switch (action) {
      case 'view':
        url = data?.viewUrl || url
        break
      case 'dismiss':
        return // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
  }
  
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then(clientList => {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ
        for (const client of clientList) {
          if (client.url === url && 'focus' in client) {
            return client.focus()
          }
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        if (clients.openWindow) {
          return clients.openWindow(url)
        }
      })
  )
})

console.log(`ÔøΩÔøΩ Service Worker v${SW_VERSION} loaded`) 
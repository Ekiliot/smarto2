#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π PNG –∏–∫–æ–Ω–∫–∏
–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Pillow: pip install Pillow
"""

import os
from PIL import Image
import sys

def generate_icons(source_path, output_dir, sizes):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with Image.open(source_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGBA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode != 'RGBA':
                img = img.convert('RGBA')
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞: {img.size[0]}x{img.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(output_dir, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            for size in sizes:
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                resized = img.resize((size, size), Image.Resampling.LANCZOS)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG
                png_filename = f"icon-{size}x{size}.png"
                png_path = os.path.join(output_dir, png_filename)
                resized.save(png_path, 'PNG', optimize=True)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ {png_filename}")
                
                # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º SVG –≤–µ—Ä—Å–∏—é (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞)
                svg_filename = f"icon-{size}x{size}.svg"
                svg_path = os.path.join(output_dir, svg_filename)
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π SVG —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ PNG
                svg_content = f'''<svg width="{size}" height="{size}" xmlns="http://www.w3.org/2000/svg">
  <image href="{png_filename}" width="{size}" height="{size}"/>
</svg>'''
                
                with open(svg_path, 'w', encoding='utf-8') as f:
                    f.write(svg_content)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω {svg_filename}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
            main_icon_path = os.path.join(os.path.dirname(output_dir), 'icon.png')
            if os.path.exists(source_path):
                import shutil
                shutil.copy2(source_path, main_icon_path)
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞: {main_icon_path}")
            
            # –°–æ–∑–¥–∞–µ–º apple-touch-icon
            apple_size = 180
            apple_resized = img.resize((apple_size, apple_size), Image.Resampling.LANCZOS)
            apple_path = os.path.join(output_dir, 'apple-touch-icon.png')
            apple_resized.save(apple_path, 'PNG', optimize=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω apple-touch-icon.png ({apple_size}x{apple_size})")
            
            # –°–æ–∑–¥–∞–µ–º SVG –≤–µ—Ä—Å–∏—é apple-touch-icon
            apple_svg_path = os.path.join(output_dir, 'apple-touch-icon.svg')
            apple_svg_content = f'''<svg width="{apple_size}" height="{apple_size}" xmlns="http://www.w3.org/2000/svg">
  <image href="apple-touch-icon.png" width="{apple_size}" height="{apple_size}"/>
</svg>'''
            
            with open(apple_svg_path, 'w', encoding='utf-8') as f:
                f.write(apple_svg_content)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω apple-touch-icon.svg")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False
    
    return True

def main():
    # –ü—É—Ç–∏
    current_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(current_dir)
    source_icon = os.path.join(project_root, 'icon.png')
    output_dir = os.path.join(project_root, 'public', 'icons')
    
    # –†–∞–∑–º–µ—Ä—ã –∏–∫–æ–Ω–æ–∫ –¥–ª—è PWA
    icon_sizes = [72, 96, 128, 144, 152, 192, 384, 512]
    
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ Smarto PWA –∏–∑ –Ω–æ–≤–æ–π PNG –∏–∫–æ–Ω–∫–∏...")
    print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞: {source_icon}")
    print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏
    if not os.path.exists(source_icon):
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_icon}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª icon.png –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
    if generate_icons(source_icon, output_dir, icon_sizes):
        print("\nüöÄ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        print("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å manifest.json –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫")

if __name__ == "__main__":
    main() 